<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button2.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>